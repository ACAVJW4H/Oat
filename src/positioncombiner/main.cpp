//******************************************************************************
//* File:   oat posicom main.cpp
//* Author: Jon Newman <jpnewman snail mit dot edu>
//
//* Copyright (c) Jon Newman (jpnewman snail mit dot edu)
//* All right reserved.
//* This file is part of the Oat project.
//* This is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* This software is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* You should have received a copy of the GNU General Public License
//* along with this source code.  If not, see <http://www.gnu.org/licenses/>.
//****************************************************************************

#include "OatConfig.h" // Generated by CMake

#include <csignal>
#include <iostream>
#include <memory>
#include <string>
#include <unordered_map>
#include <vector>
#include <boost/program_options.hpp>
#include <boost/interprocess/exceptions.hpp>
#include <cpptoml.h>

#include "../../lib/utility/IOFormat.h"

#include "PositionCombiner.h"
#include "MeanPosition.h"

namespace po = boost::program_options;

volatile sig_atomic_t quit = 0;
volatile sig_atomic_t source_eof = 0;

void printUsage(po::options_description options) {
    std::cout << "Usage: posicom [INFO]\n"
              << "   or: posicom TYPE SOURCES SINK [CONFIGURATION]\n"
              << "Combine positional information from two or more SOURCES.\n"
              << "Publish combined position to SINK.\n\n"
              << "TYPE\n"

              << "  mean: Geometric mean of SOURCE positions\n\n"
              << "SOURCES:\n"
              << "  User-supplied position source names (e.g. pos1 pos2).\n\n"
              << "SINK:\n"
              << "  User-supplied position sink name (e.g. pos).\n\n"
              << options << "\n";
}

// Signal handler to ensure shared resources are cleaned on exit due to ctrl-c
void sigHandler(int) {
    quit = 1;
}

// Processing loop
void run(const std::shared_ptr<oat::PositionCombiner>& combiner) {

    try {

        combiner->connectToNodes();

        while (!quit && !source_eof) {
            source_eof = combiner->process();
        }

    } catch (const boost::interprocess::interprocess_exception &ex) {

        // Error code 1 indicates a SIGNINT during a call to wait(), which
        // is normal behavior
        if (ex.get_error_code() != 1)
            throw;
    }
}

int main(int argc, char *argv[]) {

    std::signal(SIGINT, sigHandler);

    std::vector<std::string> sources;
    std::string sink;
    std::string type;
    std::vector<std::string> config_fk;
    bool config_used = false;
    po::options_description visible_options("OPTIONS");


    std::unordered_map<std::string, char> type_hash;
    type_hash["mean"] = 'a';

    try {

        po::options_description options("INFO");
        options.add_options()
                ("help", "Produce help message.")
                ("version,v", "Print version information.")
                ;

        po::options_description config("CONFIGURATION");
        config.add_options()
                ("config,c", po::value<std::vector<std::string> >()->multitoken(),
                "Configuration file/key pair.")
                ;
        po::options_description hidden("HIDDEN OPTIONS");
        hidden.add_options()
                ("type", po::value<std::string>(&type),
                "Type of test position combiner to use.")
                ("sources", po::value< std::vector<std::string> >(),
                "The names the SOURCES supplying the Position2D objects to be combined.")
                ("sink", po::value<std::string>(&sink),
                "The name of the SINK to which combined position Position2D objects will be published.")
                ;

        po::positional_options_description positional_options;
        positional_options.add("type", 1);
        positional_options.add("sources", -1); // If not overridden by explicit --sink, last positional argument is sink.

        po::options_description all_options("OPTIONS");
        all_options.add(options).add(config).add(hidden);

        visible_options.add(options).add(config);

        po::variables_map variable_map;
        po::store(po::command_line_parser(argc, argv)
                .options(all_options)
                .positional(positional_options)
                .run(),
                variable_map);
        po::notify(variable_map);

        // Use the parsed options
        if (variable_map.count("help")) {
            printUsage(visible_options);
            return 0;
        }

        if (variable_map.count("version")) {
            std::cout << "Oat Position Combiner version "
                      << Oat_VERSION_MAJOR
                      << "."
                      << Oat_VERSION_MINOR
                      << "\n";
            std::cout << "Written by Jonathan P. Newman in the MWL@MIT.\n";
            std::cout << "Licensed under the GPL3.0.\n";
            return 0;
        }

        if (!variable_map.count("type")) {
            printUsage(visible_options);
            std::cerr << oat::Error("A TYPE must be specified.\n");
            return -1;
        }

        if (!variable_map.count("sources")) {
            printUsage(visible_options);
            std::cerr << oat::Error("At least two SOURCES and a SINK must be specified.\n");
            return -1;
        }

        sources = variable_map["sources"].as< std::vector<std::string> >();
        if (sources.size() < 3) {
            printUsage(visible_options);
            std::cerr << oat::Error("At least two SOURCES and a SINK must be specified.\n");
            return -1;
        }

        if (!variable_map.count("sink")) {

            // If not overridden by explicit --sink, last positional argument is the sink.
            sink = sources.back();
            sources.pop_back();
        }

        if (!variable_map["config"].empty()) {

            config_fk = variable_map["config"].as<std::vector<std::string> >();

            if (config_fk.size() == 2) {
                config_used = true;
            } else {
                printUsage(visible_options);
                std::cerr << oat::Error("Configuration must be supplied as file key pair.\n");
                return -1;
            }
        }

    } catch (std::exception& e) {
        std::cerr << oat::Error(e.what()) << "\n";
        return -1;
    } catch (...) {
        std::cerr << oat::Error("Exception of unknown type.\n");
        return -1;
    }

    // Create component
    std::shared_ptr<oat::PositionCombiner> combiner;

    // Refine component type
    switch (type_hash[type]) {
        case 'a':
        {
            combiner = std::make_shared<oat::MeanPosition>(sources, sink);
            break;
        }
        default:
        {
            printUsage(visible_options);
            std::cerr << oat::Error("Invalid TYPE specified.\n");
            return -1;
        }
    }

    // The business
    try {

        if (config_used)
            combiner->configure(config_fk[0], config_fk[1]);

        // Tell user
        std::cout << oat::whoMessage(combiner->name(), "Listening to sources ");
        for (auto s : sources)
            std::cout << oat::sourceText(s) << " ";
        std::cout << ".\n"
                << oat::whoMessage(combiner->name(),
                "Steaming to sink " + oat::sinkText(sink) + ".\n")
                << oat::whoMessage(combiner->name(),
                "Press CTRL+C to exit.\n");

        // Infinite loop until ctrl-c or server end-of-stream signal
        run(combiner);

        // Tell user
        std::cout << oat::whoMessage(combiner->name(), "Exiting.\n");

        // Exit
        return 0;

    } catch (const cpptoml::parse_exception &ex) {
        std::cerr << oat::whoError(combiner->name(),
                     "Failed to parse configuration file " + config_fk[0] + "\n")
                  << oat::whoError(combiner->name(), ex.what()) << "\n";
    } catch (const std::runtime_error &ex) {
        std::cerr << oat::whoError(combiner->name(), ex.what()) << "\n";
    } catch (const cv::Exception &ex) {
        std::cerr << oat::whoError(combiner->name(), ex.what()) << "\n";
    } catch (const boost::interprocess::interprocess_exception &ex) {
        std::cerr << oat::whoError(combiner->name(), ex.what()) << "\n";
    } catch (...) {
        std::cerr << oat::whoError(combiner->name(), "Unknown exception.\n");
    }

    // Exit failure
    return -1;
}


