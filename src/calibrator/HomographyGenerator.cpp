//******************************************************************************
//* File:   HomographyGenerator.cpp
//* Author: Jon Newman <jpnewman snail mit dot edu>
//*
//* Copyright (c) Jon Newman (jpnewman snail mit dot edu) 
//* All right reserved.
//* This file is part of the Oat project.
//* This is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* This software is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* You should have received a copy of the GNU General Public License
//* along with this source code.  If not, see <http://www.gnu.org/licenses/>.
//****************************************************************************

#include "OatConfig.h" // Generated by CMake

#include <string>

#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc.hpp>

#include "../../lib/cpptoml/cpptoml.h"
#include "../../lib/cpptoml/OatTOMLSanitize.h"
#include "../../lib/utility/IOFormat.h"

#include "HomographyGenerator.h"

HomographyGenerator::HomographyGenerator(const std::string& frame_source_name) :
  Calibrator(frame_source_name)
, world_units_("meters")
, homography_valid_(false)
, homography_(cv::Matx<double, 3, 3>::eye()) { 

#ifdef OAT_USE_OPENGL
    try {
        cv::namedWindow(name(), cv::WINDOW_OPENGL & cv::WINDOW_KEEPRATIO);   
    } catch (cv::Exception& ex) {
        oat::whoWarn(name(), "OpenCV not compiled with OpenGL support. "
                           "Falling back to OpenCV's display driver.\n");
        cv::namedWindow(name(), cv::WINDOW_NORMAL & cv::WINDOW_KEEPRATIO);
    }
#else
    cv::namedWindow(name(), cv::WINDOW_NORMAL & cv::WINDOW_KEEPRATIO);
#endif

    //set the callback function for any mouse event    
    cv::setMouseCallback(name(), onMouseEvent, this);
    
}

void HomographyGenerator::configure(const std::string& config_file, const std::string& config_key) {

    // Available options
    std::vector<std::string> options {"rigid"};
    
    // This will throw cpptoml::parse_exception if a file 
    // with invalid TOML is provided
    cpptoml::table config;
    config = cpptoml::parse_file(config_file);

    // See if a camera configuration was provided
    if (config.contains(config_key)) {

        // Get this components configuration table
        auto this_config = config.get_table(config_key);
        
        // Check for unknown options in the table and throw if you find them
        oat::config::checkKeys(options, this_config);

    } else {
        throw (std::runtime_error(oat::configNoTableError(config_key, config_file)));
    }
}

void HomographyGenerator::calibrate(cv::Mat& frame) {
    
    if (clicked_) {
        frame = addMousePoint(frame);
    }
    
    cv::imshow(name(), frame);  
    
    char command = cv::waitKey(1);
    
    switch (command) {
        
    case 'a':
        {

            try {
                
                if (added_) {
                    std::cout << "This point already exists in the data set.\n"
                              << "Select another point or delete this one.\n";
                    break;
                }
                if (!clicked_) {
                    std::cout << "Click a point on the image to add it to the data set.\n"; 
                    break;
                }

                std::cout << "Enter spaced-separated world coordinate:\n";
                
                cv::Point2f dst_pt;
                std::string p, input_coords;
                std::cin >> input_coords;
                
                // TODO: Input sanity checking
                std::stringstream s(input_coords);
                s >> p;
                dst_pt.x = std::stof(p);
                
                s >> p;
                dst_pt.y = std::stof(p);

                pixels_.push_back(cv::Point2f(mouse_pt_.x, mouse_pt_.y));
                world_points_.push_back(dst_pt);

                std::cout << "Point added to map.\n\n";
                added_ = true;

            } catch (std::invalid_argument ex) {
                // TODO: Somehow, 'flush' the cin at this point?
                std::cerr << oat::Error(ex.what()) << oat::Error(": invalid argument\n\n");
            }
            
            break;
        }
    
        case 'd':
        {
            point_size_t idx;
            std::cout << "Enter data index to delete. Prese Enter to do nothing.\n";
            std::cin >> idx;
            
            if (idx < 0 || idx >= pixels_.size()) {
                std::cerr << oat::Error("Index was out of bounds. Delete was unsuccessful.\n\n");
                printDataPoints();
                break;
            }

            pixels_.erase(pixels_.begin() + idx);
            world_points_.erase(world_points_.begin() + idx);
            
            std::cout << "Data point " << idx << " was deleted.\n\n";
            
            break;
        }
        case 'p':
        {
            printDataPoints();
            break;
        }
    }
    
}

void HomographyGenerator::printDataPoints() {

    std::cout << "      pixels\t world\n";
    for(point_size_t i = 0; i != pixels_.size(); i++) {
        
        std::cout << "[" << i << "]: " 
                  << "(" << pixels_[i].x << ", " << pixels_[i].y << ")\t"
                  << "(" << world_points_[i].x << ", " << world_points_[i].y << ")\n";

    }
    
    std::cout << "\n";
}

cv::Mat HomographyGenerator::addMousePoint(cv::Mat& frame) {

    // Write the click point coords on the frame
    cv::circle(frame, mouse_pt_, 2, cv::Scalar(0, 0, 255), -1);
    std::string coord = "(" + std::to_string(mouse_pt_.x) + ", " + std::to_string(mouse_pt_.y) + ")";
    cv::Point coord_text_origin(mouse_pt_.x + 10.0, mouse_pt_.y + 10.0);
    cv::putText(frame, coord, coord_text_origin, 1, 1, cv::Scalar(0, 0, 255));
    
    return frame;
}

void HomographyGenerator::onMouseEvent(int event, int x, int y, int, void* _this) {

    static_cast<HomographyGenerator*>(_this)->onMouseEvent(event, x, y);
}

void HomographyGenerator::onMouseEvent(int event, int x, int y) {

    if (event == cv::EVENT_LBUTTONDOWN) {
        mouse_pt_.x = x;
        mouse_pt_.y = y;

        clicked_ = true;
        added_ = false;

        // TODO: Display overlay instructions
        //cv::displayOverlay(name(), "Enter world coordinates in terminal...", 5000);
        //std::cout << "Current position (" << x << ", " << y << ")\n";
    }
}

