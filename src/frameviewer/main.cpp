//******************************************************************************
//* File:   oat view main.cpp
//* Author: Jon Newman <jpnewman snail mit dot edu>
//
//* Copyright (c) Jon Newman (jpnewman snail mit dot edu) 
//* All right reserved.
//* This file is part of the Simple Tracker project.
//* This is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* This software is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* You should have received a copy of the GNU General Public License
//* along with this source code.  If not, see <http://www.gnu.org/licenses/>.
//****************************************************************************

#include "OatConfig.h" // Generated by CMake

#include <csignal>
#include <ostream>
#include <string>
#include <boost/program_options.hpp>
#include <opencv2/core.hpp>

#include "../../lib/utility/IOFormat.h"

#include "Viewer.h"

namespace po = boost::program_options;

volatile sig_atomic_t quit = 0;
volatile sig_atomic_t source_eof = 0;

// Signal handler to ensure shared resources are cleaned on exit due to ctrl-c
void sigHandler(int s) {
    quit = 1;
}

void run(Viewer* viewer) {

    while (!quit && !source_eof) {
        source_eof = viewer->showImage();
    }
}

void printUsage(po::options_description options) {
    std::cout << "Usage: view [INFO]\n"
              << "   or: view SOURCE [CONFIGURATION]\n"
              << "Display frame SOURCE on a monitor.\n\n"
              << "SOURCE:\n"
              << "  User-supplied name of the memory segment to receive frames "
              << "from (e.g. raw).\n\n"
              << options << "\n";
}

int main(int argc, char *argv[]) {

    std::signal(SIGINT, sigHandler);

    std::string source;
    std::string file_name;
    std::string save_path;
    po::options_description visible_options("OPTIONS");

    try {

        po::options_description options("INFO");
        options.add_options()
                ("help", "Produce help message.")
                ("version,v", "Print version information.")
                ;

        po::options_description config("CONFIGURATION");
        config.add_options()
                ("filename,n", po::value<std::string>(&file_name),
                "The base snapshot file name.\n"
                "The timestamp of the snapshot will be prepended to this name."
                "If not provided, the SOURCE name will be used.\n")
                ("folder,f", po::value<std::string>(&save_path),
                "The folder in which snapshots will be saved.")
                ;

        po::options_description hidden("HIDDEN OPTIONS");
        hidden.add_options()
                ("source", po::value<std::string>(&source),
                "The name of the frame SOURCE that supplies frames to view.\n")
                ;

        po::positional_options_description positional_options;
        positional_options.add("source", -1);

        po::options_description all_options("ALL OPTIONS");
        all_options.add(options).add(hidden);

        visible_options.add(options).add(config);

        po::variables_map variable_map;
        po::store(po::command_line_parser(argc, argv)
                .options(all_options)
                .positional(positional_options)
                .run(),
                variable_map);
        po::notify(variable_map);

        // Use the parsed options
        if (variable_map.count("help")) {
            printUsage(visible_options);
            return 0;
        }

        if (variable_map.count("version")) {
            std::cout << "Oat Frame Viewer version "
                      << Oat_VERSION_MAJOR
                      << "."
                      << Oat_VERSION_MINOR
                      << "\n";
            std::cout << "Written by Jonathan P. Newman in the MWL@MIT.\n";
            std::cout << "Licensed under the GPL3.0.\n";
            return 0;
        }

        if (!variable_map.count("source")) {
            printUsage(visible_options);
            std::cerr << oat::Error("A SOURCE must be specified. Exiting.\n");
            return -1;
        }

        if (!variable_map.count("folder")) {
            save_path = ".";
        }

        if (!variable_map.count("filename")) {
            file_name = "";
        }

    } catch (std::exception& e) {
        std::cerr << oat::Error(e.what()) << "\n";
        return -1;
    } catch (...) {
        std::cerr << oat::Error("Exception of unknown type.\n");
        return -1;
    }

    // Make the viewer
    Viewer viewer(source, save_path, file_name);

    // Tell user
    std::cout << oat::whoMessage(viewer.get_name(),
              "Listening to source " + oat::sourceText(source) + ".\n")
              << oat::whoMessage(viewer.get_name(),
              "Press 's' on the viewer window to take a snapshot.\n")
              << oat::whoMessage(viewer.get_name(),
              "Press CTRL+C to exit.\n");

    try {

        // Infinite loop until ctrl-c or end of stream signal
        run(&viewer);

        // Tell user
        std::cout << oat::whoMessage(viewer.get_name(), "Exiting.\n");

        // Exit
        return 0;

    } catch (const std::runtime_error& ex) {
        std::cerr << oat::whoError(viewer.get_name(), ex.what())
                  << "\n";
    } catch (const cv::Exception& ex) {
        std::cerr << oat::whoError(viewer.get_name(), ex.msg)
                  << "\n";
    } catch (...) {
        std::cerr << oat::whoError(viewer.get_name(), "Unknown exception.\n");
    }

    // Exit failure
    return -1;
}
