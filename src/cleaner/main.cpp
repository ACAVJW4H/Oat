//******************************************************************************
//* File:   oat clean main.cpp
//* Author: Jon Newman <jpnewman snail mit dot edu>
//*
//* Copyright (c) Jon Newman (jpnewman snail mit dot edu)
//* All right reserved.
//* This file is part of the Oat project.
//* This is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* This software is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* You should have received a copy of the GNU General Public License
//* along with this source code.  If not, see <http://www.gnu.org/licenses/>.
//****************************************************************************

#include "OatConfig.h" // Generated by CMake

#include <csignal>
#include <iostream>
#include <unordered_map>

#include <boost/program_options.hpp>
#include <boost/interprocess/managed_shared_memory.hpp>

#include "../../lib/utility/IOFormat.h"

namespace po = boost::program_options;
namespace bip = boost::interprocess;

void printUsage(po::options_description options) {
    std::cout << "Usage: clean [INFO]\n"
              << "   or: clean NAMES [CONFIGURATION]\n"
              << "Deallocate the named shared memory segments specified by NAMES.\n\n"
              << options << "\n";
}

int main(int argc, char *argv[]) {

    std::vector<std::string> names;
    bool quiet = false;
    bool legacy = false;

    try {

        po::options_description options("INFO");
        options.add_options()
            ("help", "Produce help message.")
            ("version,v", "Print version information.")
            ;

        po::options_description config("CONFIGURATION");
        options.add_options()
            ("quiet,q", "Quiet mode. Prevent output text.")
            ;

        po::options_description hidden("HIDDEN OPTIONS");
        hidden.add_options()
            ("names", po::value< std::vector<std::string> >(),
            "The names of the shared memory segments to remove.")
            ;

        po::positional_options_description positional_options;
        positional_options.add("names", -1);

        po::options_description all_options("ALL");
        all_options.add(options).add(config).add(hidden);

        po::options_description visible_options("OPTIONS");
        visible_options.add(options).add(config);

        po::variables_map variable_map;
        po::store(po::command_line_parser(argc, argv)
                .options(all_options)
                .positional(positional_options)
                .run(),
                variable_map);
        po::notify(variable_map);

        // Use the parsed options
        if (variable_map.count("help")) {
            printUsage(options);
            return 0;
        }

        if (variable_map.count("version")) {
            std::cout << "Oat Cleaner version "
                      << Oat_VERSION_MAJOR
                      << "."
                      << Oat_VERSION_MINOR
                      << "\n";
            std::cout << "Written by Jonathan P. Newman in the MWL@MIT.\n";
            std::cout << "Licensed under the GPL3.0.\n";
            return 0;
        }

        if (!variable_map.count("names")) {
            printUsage(visible_options);
            std::cout << "Error: at least a single NAME must be specified. Exiting.\n";
            return -1;
        }

        if (variable_map.count("quiet"))
            quiet = true;

        if (variable_map.count("legacy"))
            legacy = true;

        names = variable_map["names"].as< std::vector<std::string> >();

    } catch (std::exception& e) {
        std::cerr << oat::Error(e.what()) << "\n";
        return -1;
    } catch (...) {
        std::cerr << oat::Error("Exception of unknown type.\n");
        return -1;
    }

    for (const auto &name : names) {

        if (!quiet)
           std::cout << "Trying to removing \'" << name << "\' from shared memory...";

        bool success{false};

        if (bip::shared_memory_object::remove((name + "_node").c_str()))
            success = true;

        if (bip::shared_memory_object::remove((name + "_obj").c_str()))
            success = true;

        if (success && !quiet)
            std::cout << "success.\n";

        if (!success && !quiet)
            std::cout << "not found. Are you sure this segment exists?.\n";
    }

    // Exit
    return 0;
}
