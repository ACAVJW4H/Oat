//******************************************************************************
//* File:   BackgroundSubtractor.cpp
//* Author: Jon Newman <jpnewman snail mit dot edu>
//*
//* Copyright (c) Jon Newman (jpnewman snail mit dot edu)
//* All right reserved.
//* This file is part of the Oat project.
//* This is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* This software is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* You should have received a copy of the GNU General Public License
//* along with this source code.  If not, see <http://www.gnu.org/licenses/>.
//******************************************************************************

#include "OatConfig.h" // Generated by CMake

#include <string>
#include <iostream>
#include <cpptoml.h>
#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>

#include "../../lib/utility/IOFormat.h"
#include "../../lib/utility/ProgramOptions.h"
#include "../../lib/utility/TOMLSanitize.h"

#include "BackgroundSubtractor.h"

namespace oat {

BackgroundSubtractor::BackgroundSubtractor(
            const std::string &frame_source_address,
            const std::string &frame_sink_address) :
  FrameFilter(frame_source_address, frame_sink_address)
{
    config_keys_ = {"background"};
}

void BackgroundSubtractor::appendOptions(po::options_description &opts) const {

    // Accepts a config file
    FrameFilter::appendOptions(opts);

    // Update CLI options
    opts.add_options()
        ("background", po::value<std::string>(),
         "Path to background image used for subtraction.")
        ;
}

void BackgroundSubtractor::configure(const po::variables_map &vm) {

    // Check for config file and entry correctness
    auto config_table = oat::config::getConfigTable(vm);
    oat::config::checkKeys(config_keys_, config_table);

    // Background image path
    std::string img_path;
    if (oat::config::getValue(vm, config_table, "background", img_path)) {

        // TODO: Color image only?
        background_frame_ = cv::imread(img_path, CV_LOAD_IMAGE_COLOR);

        if (background_frame_.data == NULL)
            throw (std::runtime_error("File \"" + img_path + "\" could not be read."));

        background_set_ = true;
    }
}

void BackgroundSubtractor::setBackgroundImage(const cv::Mat &frame) {

    background_frame_ = frame.clone();
    background_set_ = true;
}

void BackgroundSubtractor::filter(cv::Mat& frame) {

    // First frame used if not provided in config
    if (!background_set_)
        setBackgroundImage(frame);

    frame = frame - background_frame_;
}

} /* namespace oat */
