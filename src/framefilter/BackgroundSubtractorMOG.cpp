//******************************************************************************
//* File:   BackgroundSubtractorMOG.cpp
//* Author: Jon Newman <jpnewman snail mit dot edu>
//*
//* Copyright (c) Jon Newman (jpnewman snail mit dot edu)
//* All right reserved.
//* This file is part of the Oat project.
//* This is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* This software is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* You should have received a copy of the GNU General Public License
//* along with this source code.  If not, see <http://www.gnu.org/licenses/>.
//******************************************************************************

#include "OatConfig.h" // Generated by CMake

#include <stdexcept>
#include <string>
#include <iostream>
#include <opencv2/cvconfig.h>
#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/video/background_segm.hpp>
#ifdef HAVE_CUDA
#include <opencv2/cudabgsegm.hpp>
#include <opencv2/cudaarithm.hpp>
#endif

#include <cpptoml.h>
#include "../../lib/utility/OatTOMLSanitize.h"
#include "../../lib/utility/IOFormat.h"

#include "BackgroundSubtractorMOG.h"

namespace oat {

BackgroundSubtractorMOG::BackgroundSubtractorMOG(
        const std::string &frame_source_address,
        const std::string &frame_sink_address) :
  FrameFilter(frame_source_address, frame_sink_address) {

#ifdef HAVE_CUDA
    cv::cuda::GpuMat gm; // Create context. This can take an extremely long time
    gm.create(1, 1, CV_8U);
    configureGPU(0);
    background_subtractor_ = cv::cuda::createBackgroundSubtractorMOG(/*defaults OK?*/);
#else
    background_subtractor_ = cv::createBackgroundSubtractorMOG2(/*defaults OK?*/);
#endif
}

void BackgroundSubtractorMOG::configure(const std::string &config_file, const std::string &config_key) {

    // Available options
    std::vector<std::string> options {"gpu_index",
                                      "learning_coeff"};

    // This will throw cpptoml::parse_exception if a file
    // with invalid TOML is provided
    auto config = cpptoml::parse_file(config_file);

    // See if a camera configuration was provided
    if (config->contains(config_key)) {

        // Get this components configuration table
        auto this_config = config->get_table(config_key);

        // Check for unknown options in the table and throw if you find them
        oat::config::checkKeys(options, this_config);

#ifdef HAVE_CUDA
        // GPU index
        int64_t index;
        if (oat::config::getValue(this_config, "gpu_index", index, 0)) {
            configureGPU(index);
            background_subtractor_ = cv::cuda::createBackgroundSubtractorMOG(/*defaults OK?*/);
        }
#endif
        // Learning coefficient
        oat::config::getValue(this_config, "learning_coeff", learning_coeff_, 0.0, 1.0);

    } else {
        throw (std::runtime_error(oat::configNoTableError(config_key, config_file)));
    }
}

#ifdef HAVE_CUDA
void BackgroundSubtractorMOG::configureGPU(int64_t index) {

    // Determine if a compatible device is available
    int num_devices = cv::cuda::getCudaEnabledDeviceCount();
    if (num_devices < 1)
        throw (std::runtime_error("No GPU found or OpenCV was compiled without CUDA support."));

    if (index > num_devices)
        throw (std::runtime_error("Selected GPU index is invalid."));

    cv::cuda::DeviceInfo gpu_info(index);
    if (!gpu_info.isCompatible())
        throw (std::runtime_error("Selected GPU is not compatible with OpenCV."));

    cv::cuda::setDevice(index);

#ifndef NDEBUG
    cv::cuda::printShortCudaDeviceInfo(index);
#endif
}
#endif

void BackgroundSubtractorMOG::filter(cv::Mat &frame) {

#ifdef HAVE_CUDA
    current_frame_.upload(frame);
    background_subtractor_->apply(current_frame_, background_mask_, learning_coeff_);
    //TODO: Add hard mask operation here to increase performance
    cv::cuda::bitwise_not(background_mask_, background_mask_);
    current_frame_.setTo(0, background_mask_);
    current_frame_.download(frame);
#else
    background_subtractor_->apply(frame, background_mask_, learning_coeff_);
    frame.setTo(0, background_mask_ == 0);
#endif
}

} /* namespace oat */
