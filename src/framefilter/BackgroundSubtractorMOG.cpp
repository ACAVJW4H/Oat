//******************************************************************************
//* File:   BackgroundSubtractorMOG.cpp
//* Author: Jon Newman <jpnewman snail mit dot edu>
//*
//* Copyright (c) Jon Newman (jpnewman snail mit dot edu) 
//* All right reserved.
//* This file is part of the Oat project.
//* This is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* This software is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* You should have received a copy of the GNU General Public License
//* along with this source code.  If not, see <http://www.gnu.org/licenses/>.
//******************************************************************************

#include "OatConfig.h" // Generated by CMake

#include <string>
#include <iostream>
#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/video/background_segm.hpp>
#ifdef OAT_USE_CUDA
#include <opencv2/core/cuda.hpp>
#include <opencv2/cudabgsegm.hpp>
#endif

#include <cpptoml.h>
#include "../../lib/utility/OatTOMLSanitize.h"
#include "../../lib/utility/IOFormat.h"

#include "BackgroundSubtractorMOG.h"

BackgroundSubtractorMOG::BackgroundSubtractorMOG(const std::string& source_name, const std::string& sink_name) :
  FrameFilter(source_name, sink_name)
, learning_coeff(0.0) { 

#ifdef OAT_USE_CUDA
    background_subtractor = cv::cuda::createBackgroundSubtractorMOG(/*defaults OK?*/);
#else
    background_subtractor = cv::createBackgroundSubtractorMOG2(/*defaults OK?*/);
#endif
}

void BackgroundSubtractorMOG::configure(const std::string& config_file, const std::string& config_key) { 

    // Available options
    std::vector<std::string> options {"learning_coeff"};
    
    // This will throw cpptoml::parse_exception if a file 
    // with invalid TOML is provided
    auto config = cpptoml::parse_file(config_file);

    // See if a camera configuration was provided
    if (config->contains(config_key)) {

        // Get this components configuration table
        auto this_config = config->get_table(config_key);
        
        // Check for unknown options in the table and throw if you find them
        oat::config::checkKeys(options, this_config);

        // Learning coefficient
        oat::config::getValue(this_config, "learning_coeff", learning_coeff, 0.0, 1.0);

    } else {
        throw (std::runtime_error(oat::configNoTableError(config_key, config_file)));
    }

}

cv::Mat BackgroundSubtractorMOG::filter(cv::Mat& frame) {

#ifdef OAT_USE_CUDA
        current_frame.upload(frame);
        background_subtractor->apply(current_frame, background_mask, learning_coeff);
        cv::cuda::bitwise_not(background_mask, background_mask);
        current_frame.setTo(0, background_mask);
        current_frame.download(frame);
#else
        background_subtractor->apply(frame, background_mask, learning_coeff);
        frame.setTo(0, background_mask == 0);  
#endif
        
        return frame;
}
