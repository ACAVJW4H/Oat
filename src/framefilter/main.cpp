//******************************************************************************
//* File:   oat framefilt main.cpp
//* Author: Jon Newman <jpnewman snail mit dot edu>
//
//* Copyright (c) Jon Newman (jpnewman snail mit dot edu)
//* All right reserved.
//* This file is part of the Oat project.
//* This is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* This software is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* You should have received a copy of the GNU General Public License
//* along with this source code.  If not, see <http://www.gnu.org/licenses/>.
//****************************************************************************

#include "OatConfig.h" // Generated by CMake

#include <csignal>
#include <iostream>
#include <memory>
#include <string>
#include <unordered_map>
#include <vector>
#include <boost/program_options.hpp>
#include <boost/interprocess/exceptions.hpp>
#include <cpptoml.h>

#include "../../lib/utility/IOFormat.h"

#include "FrameFilter.h"
#include "BackgroundSubtractor.h"
#include "BackgroundSubtractorMOG.h"
#include "FrameMasker.h"
#include "Undistorter.h"

namespace po = boost::program_options;

volatile sig_atomic_t quit = 0;
volatile sig_atomic_t source_eof = 0;

void printUsage(const po::options_description &options){
    std::cout << "Usage: framefilt [INFO]\n"
              << "   or: framefilt TYPE SOURCE SINK [CONFIGURATION]\n"
              << "Filter frames from SOURCE and published filtered frames "
              << "to SINK.\n\n"
              << "TYPE\n"
              << "  bsub: Background subtraction\n"
              << "  mask: Binary mask\n"
              << "  mog: Mixture of Gaussians background segmentation.\n"
              << "  undistort: Compensate for lens distortion using distortion model.\n\n"
              << "SOURCE:\n"
              << "  User-supplied name of the memory segment to receive frames "
              << "from (e.g. raw).\n\n"
              << "SINK:\n"
              << "  User-supplied name of the memory segment to publish frames "
              << "to (e.g. filt).\n"
              << options << "\n";
}

// Signal handler to ensure shared resources are cleaned on exit due to ctrl-c
void sigHandler(int) {
    quit = 1;
}

// Processing loop
void run(const std::shared_ptr<oat::FrameFilter>& filter) {

    try {

        filter->connectToNode();

        while (!quit && !source_eof) {
            source_eof = filter->processFrame();
        }

    } catch (const boost::interprocess::interprocess_exception &ex) {

        // Error code 1 indicates a SIGNINT during a call to wait(), which
        // is normal behavior
        if (ex.get_error_code() != 1)
            throw;
    }
}

int main(int argc, char *argv[]) {

    std::signal(SIGINT, sigHandler);

    // Results of command line input
    std::string type;
    std::string source;
    std::string sink;
    std::vector<std::string> config_fk;
    bool config_used = false;

    // Component specializations
    std::unordered_map<std::string, char> type_hash;
    type_hash["bsub"] = 'a';
    type_hash["mask"] = 'b';
    type_hash["mog"] = 'c';
    type_hash["undistort"] = 'd';

    // The component itself
    std::string comp_name = "framefilt";
    std::shared_ptr<oat::FrameFilter> filter;

    // Program options
    po::options_description visible_options;

    try {

        // Program metadata
        po::options_description info_opt_desc("INFO");
        info_opt_desc.add_options()
                ("help", "Produce help message.")
                ("version,v", "Print version information.")
                ;

        // Component configuration
        po::options_description config_opt_desc("CONFIGURATION");
        config_opt_desc.add_options()
                ("config,c", po::value<std::vector<std::string> >()->multitoken(),
                "Configuration file/key pair.")
                ;

        // Required positional options
        po::options_description positional_opt_desc("POSITIONAL");
        positional_opt_desc.add_options()
                ("type", po::value<std::string>(&type)->required(),
                "Type of frame filter to use.")
                ("source", po::value<std::string>(&source)->required(),
                 "User-supplied name of the memory segment to receive frames.")
                ("sink", po::value<std::string>(&sink)->required(),
                 "User-supplied name of the memory segment to publish frames.")
                ;

        po::positional_options_description positional_options;
        positional_options.add("type", 1);
        positional_options.add("source", 1);
        positional_options.add("sink", 1);

        // Visible options for help message
        visible_options.add(info_opt_desc).add(config_opt_desc);

        // All options, including positional
        po::options_description options;
        options.add(info_opt_desc).add(config_opt_desc).add(positional_opt_desc);

        po::variables_map option_vm;
        po::store(po::command_line_parser(argc, argv)
                .options(options)
                .positional(positional_options)
                .run(),
                option_vm);

        if (option_vm.count("help")) {
            printUsage(visible_options);
            return 0;
        }

        if (option_vm.count("version")) {
            std::cout << "Oat Frame Filter version "
                      << Oat_VERSION_MAJOR
                      << "."
                      << Oat_VERSION_MINOR
                      << "\n";
            std::cout << "Written by Jonathan P. Newman in the MWL@MIT.\n";
            std::cout << "Licensed under the GPL3.0.\n";
            return 0;
        }

        // Check options for errors (must be after help and version checks)
        po::notify(option_vm);

        // Check for configuration file and key
        if (!option_vm["config"].empty()) {

            config_fk = option_vm["config"].as<std::vector<std::string> >();

            if (config_fk.size() == 2) {
                config_used = true;
            } else {
                printUsage(visible_options);
                std::cerr << oat::Error("Configuration must be supplied as file key pair.\n");
                return -1;
            }
        }

        // Refine component type
        switch (type_hash[type]) {
            case 'a':
            {
                filter = std::make_shared<oat::BackgroundSubtractor>(source, sink);
                break;
            }
            case 'b':
            {
                filter = std::make_shared<oat::FrameMasker>(source, sink);
                if (!config_used)
                     std::cerr << oat::whoWarn(comp_name,
                             "No mask configuration was provided."
                             " This filter does nothing but waste CPU cycles.\n");
                break;
            }
            case 'c':
            {
                filter = std::make_shared<oat::BackgroundSubtractorMOG>(source, sink);
                break;
            }
            case 'd':
            {
                filter = std::make_shared<oat::Undistorter>(source, sink);
                if (!config_used)
                     std::cerr << oat::whoWarn(comp_name,
                             "No undistortion configuration was provided."
                             " This filter does nothing but waste CPU cycles.\n");
                break;
            }
            default:
            {
                printUsage(visible_options);
                std::cerr << oat::Error("Invalid TYPE specified.\n");
                return -1;
            }
        }

        // Get specialized component name
        comp_name = filter->name(); 

        // Process configuration file if provided
        if (config_used)
            filter->configure(config_fk[0], config_fk[1]);

        // Tell user
        std::cout << oat::whoMessage(comp_name,
                "Listening to source " + oat::sourceText(source) + ".\n")
                << oat::whoMessage(comp_name,
                "Steaming to sink " + oat::sinkText(sink) + ".\n")
                << oat::whoMessage(comp_name,
                "Press CTRL+C to exit.\n");

        // Infinite loop until ctrl-c or end of stream signal
        run(filter);

        // Tell user
        std::cout << oat::whoMessage(comp_name, "Exiting.")
                  << std::endl;

        // Exit success
        return 0;

    } catch (const po::error &ex) {
        printUsage(visible_options);
        std::cerr << oat::whoError(comp_name, ex.what()) << std::endl;
    } catch (const cpptoml::parse_exception &ex) {
        std::cerr << oat::whoError(comp_name,
                     "Failed to parse configuration file " + config_fk[0] + "\n")
                  << oat::whoError(comp_name, ex.what())
                  << std::endl;
    } catch (const std::runtime_error &ex) {
        std::cerr << oat::whoError(comp_name,ex.what()) << std::endl;
    } catch (const cv::Exception &ex) {
        std::cerr << oat::whoError(comp_name, ex.what()) << std::endl;
    } catch (...) {
        std::cerr << oat::whoError(comp_name, "Unknown exception.")
                  << std::endl;
    }

    // Exit failure
    return -1;

}
