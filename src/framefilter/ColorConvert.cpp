//******************************************************************************
//* File:   ColorConvert.cpp
//* Author: Jon Newman <jpnewman snail mit dot edu>
//*
//* Copyright (c) Jon Newman (jpnewman snail mit dot edu)
//* All right reserved.
//* This file is part of the Oat project.
//* This is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* This software is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* You should have received a copy of the GNU General Public License
//* along with this source code.  If not, see <http://www.gnu.org/licenses/>.
//******************************************************************************

#include "OatConfig.h" // Generated by CMake

#include <string>
#include <iostream>
#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>

#include <cpptoml.h>
#include "../../lib/utility/TOMLSanitize.h"
#include "../../lib/utility/IOFormat.h"

#include "ColorConvert.h"

// Populate available conversion
//ColorConvert::color_conversion_map_["BGR2GRAY"] = cv::COLOR_BGR2GRAY;

namespace oat {

ColorConvert::ColorConvert(
            const std::string &frame_source_address,
            const std::string &frame_sink_address) :
  FrameFilter(frame_source_address, frame_sink_address)
{
    // Nothing
}

void ColorConvert::connectToNode() {

    // Establish our a slot in the node
    frame_source_.touch(frame_source_address_);

    // Wait for sychronous start with sink when it binds the node
    frame_source_.connect();

    // Get frame meta data to format sink
    oat::Source<oat::SharedFrameHeader>::ConnectionParameters param =
            frame_source_.parameters();

    // Bind to sink node and create a shared cv::Mat
    // TODO: HACK!!
    frame_sink_.bind(frame_sink_address_, param.bytes);
    shared_frame_ = frame_sink_.retrieve(param.rows, param.cols, CV_8UC1);
}

// TODO: Make all possible color transformations avaiable
void ColorConvert::configure(const std::string& config_file,
                             const std::string& config_key) {

    /// Available options
    //std::vector<std::string> options {"conversion-code"};

    //// This will throw cpptoml::parse_exception if a file
    //// with invalid TOML is provided
    //auto config = cpptoml::parse_file(config_file);

    //// See if a camera configuration was provided
    //if (config->contains(config_key)) {

    //    // Get this components configuration table
    //    auto this_config = config->get_table(config_key);

    //    // Check for unknown options in the table and throw if you find them
    //    oat::config::checkKeys(options, this_config);

    //    // Color conversion code
    //    std::string key;
    //    oat::config::getValue(this_config, "conversion-code", key);
    //    conversion_code_ = conversion_map_[key];

    //} else {
    //    throw (std::runtime_error(oat::configNoTableError(config_key, config_file)));
    //}
}

void ColorConvert::filter(cv::Mat& frame) {

    cv::cvtColor(frame, frame, conversion_code_);
}

} /* namespace oat */

