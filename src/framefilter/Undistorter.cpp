//******************************************************************************
//* File:   Undistorter.cpp
//* Author: Jon Newman <jpnewman snail mit dot edu>
//*
//* Copyright (c) Jon Newman (jpnewman snail mit dot edu)
//* All right reserved.
//* This file is part of the Oat project.
//* This is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* This software is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* You should have received a copy of the GNU General Public License
//* along with this source code.  If not, see <http://www.gnu.org/licenses/>.
//******************************************************************************

#include <string>

#include <opencv2/core.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/calib3d.hpp>
#include <cpptoml.h>

#include "../../lib/utility/TOMLSanitize.h"
#include "../../lib/utility/IOFormat.h"

#include "Undistorter.h"

namespace oat {

Undistorter::Undistorter(const std::string &source_name, 
                         const std::string &sink_name) :
  FrameFilter(source_name, sink_name)
{
  config_keys_ = {"camera-model",
                  "camera-matrix",
                  "distortion-coeffs"};
}

void Undistorter::appendOptions(po::options_description &opts) const {

    // Accepts a config file
    FrameFilter::appendOptions(opts);

    // Update CLI options
    opts.add_options()
        ("camera-model", po::value<int>(),
        "Model used for camera calibration. Generated by oat-calibrate.\n\n"
        "Values:\n"
        "  0: Pinhole camera model (default).\n"
        "  1: Fisheye camera model (wide-angle lens with pronounced radial distortion).\n")
        ("camera-matrix [CF]", po::value<std::string>(),
         "Nine element float array specifying the 3x3 camera matrix for your "
         "imaging setup. Generated by oat-calibrate.")
        ("distortion-coeffs [CF]", po::value<std::string>(), 
         "Five to eight element vector specifying lens distortion coefficients. "
         "Generated by oat-calibrate.")
        ;
}

void Undistorter::configure(const po::variables_map &vm) {

    // Check for config file and entry correctness
    auto config_table = oat::config::getConfigTable(vm);
    oat::config::checkKeys(config_keys_, config_table);

    int model;
    if (oat::config::getNumericValue(vm, 
                                     config_table,
                                     "camera-model",
                                     model,
                                     static_cast<int>(CameraModel::PINHOLE),
                                     static_cast<int>(CameraModel::FISHEYE))) {

        camera_model_ = static_cast<CameraModel>(model);
    }

    oat::config::Array dc_array;
    if (oat::config::getArray(config_table, "distortion-coeffs", dc_array, true)) {
        
        auto dc_vec = dc_array->array_of<double>();

        if (dc_vec.size() < 5 || dc_vec.size() > 8)
            throw (std::runtime_error("Distortion coefficients consist of 5 to 8 values."));

        distortion_coefficients_.clear();
        for (auto &dc : dc_vec)
            distortion_coefficients_.push_back(dc.get()->get());
    } 

    // Camera Matrix
    oat::config::Array cal_array;
    if (oat::config::getArray(config_table, "camera-matrix", cal_array, 9, true)) {

        auto camera_vec = cal_array->array_of<double>();

        camera_matrix_(0, 0) = camera_vec[0]->get();
        camera_matrix_(0, 1) = camera_vec[1]->get();
        camera_matrix_(0, 2) = camera_vec[2]->get();
        camera_matrix_(1, 0) = camera_vec[3]->get();
        camera_matrix_(1, 1) = camera_vec[4]->get();
        camera_matrix_(1, 2) = camera_vec[5]->get();
        camera_matrix_(2, 0) = camera_vec[6]->get();
        camera_matrix_(2, 1) = camera_vec[7]->get();
        camera_matrix_(2, 2) = camera_vec[8]->get();

    }
}

void Undistorter::filter(cv::Mat &frame) {

    cv::Mat temp = frame.clone();

    switch (camera_model_) {
        case CameraModel::PINHOLE :
        {
            cv::undistort(temp, frame, camera_matrix_, distortion_coefficients_);
            break;
        }
        case CameraModel::FISHEYE :
        {
            cv::fisheye::undistortImage(temp, frame, camera_matrix_,
                    distortion_coefficients_, cv::Matx33d::eye());
            break;
        }
        default :
        {
            throw std::runtime_error("Invalid camera model selection.\n");
        }
    }
}

} /* namespace oat */
