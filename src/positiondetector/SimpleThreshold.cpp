//******************************************************************************
//* File:   SimpleThreshold.cpp
//* Author: Jon Newman <jpnewman snail mit dot edu>
//*
//* Copyright (c) Jon Newman (jpnewman snail mit dot edu)
//* All right reserved.
//* This file is part of the Oat project.
//* This is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* This software is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* You should have received a copy of the GNU General Public License
//* along with this source code.  If not, see <http://www.gnu.org/licenses/>.
//****************************************************************************

#include "OatConfig.h" // Generated by CMake

#include <string>
#include <opencv2/cvconfig.h>
#include <opencv2/opencv.hpp>
#include <cpptoml.h>

#include "../../lib/datatypes/Position2D.h"
#include "../../lib/utility/IOFormat.h"
#include "../../lib/utility/TOMLSanitize.h"

#include "DetectorFunc.h"
#include "SimpleThreshold.h"

namespace oat {

SimpleThreshold::SimpleThreshold(const std::string &frame_source_address,
                                 const std::string &position_sink_address) :
  PositionDetector(frame_source_address, position_sink_address)
, tuning_image_title_(position_sink_address + "_tuning")
{
    // Set defaults for the erode and dilate blocks
    // Cannot use initializer because if these are set to 0, erode_on or
    // dilate_on must be set to false
    set_erode_size(0);
    set_dilate_size(0);
}

void SimpleThreshold::detectPosition(cv::Mat &frame, oat::Position2D &position) {

    if (tuning_on_)
        tune_frame_ = frame.clone();

    applyThreshold(frame);

    // Threshold frame will be destroyed by the transform below, so we need to use
    // it to form the frame that will be shown in the tuning window here
    if (tuning_on_)
         tune_frame_.setTo(cv::Scalar(255, 0, 255), threshold_frame_ > 0);

    siftContours(threshold_frame_,
                 position,
                 object_area_,
                 min_object_area_,
                 max_object_area_);

    if (tuning_on_)
        tune(tune_frame_, position);
}

void SimpleThreshold::configure(const std::string& config_file,
                                const std::string& config_key) {

    // Available options
    std::vector<std::string> options {"erode",
                                      "dilate",
                                      "min-intensity",
                                      "max-intensity",
                                      "min-area",
                                      "max-area",
                                      "tune"};

    // This will throw cpptoml::parse_exception if a file
    // with invalid TOML is provided
   auto config = cpptoml::parse_file(config_file);

    // See if a camera configuration was provided
    if (config->contains(config_key)) {

        // Get this components configuration table
        auto this_config = config->get_table(config_key);

        // Check for unknown options in the table and throw if you find them
        oat::config::checkKeys(options, this_config);

        // Erode
        {
            int64_t val;
            oat::config::getValue(this_config, "erode", val, (int64_t)0);
            set_erode_size(val);

        }

        // Dilate
        {
            int64_t val;
            oat::config::getValue(this_config, "dilate", val, (int64_t)0);
            set_dilate_size(val);
        }

        // Intensity min, max
        {
            int64_t min, max;
            oat::config::getValue(this_config, "min-intensity", min, 256);
            min_intensity_bound_ = min;

            oat::config::getValue(this_config, "max-intensity", max, 256);
            max_intensity_bound_ = max;
        }

        // Minimum object area
        oat::config::getValue(this_config, "min-area", min_object_area_, 0.0);

        // Maximum object area
        oat::config::getValue(this_config, "max-area", max_object_area_, 0.0);

        // Tuning
        oat::config::getValue(this_config, "tune", tuning_on_);

    } else {
        throw (std::runtime_error(oat::configNoTableError(config_key, config_file)));
    }

}

void SimpleThreshold::tune(cv::Mat &frame, const oat::Position2D &position) {

    if (!tuning_windows_created_)
        createTuningWindows();

    std::string msg = cv::format("Object not found");

    // Plot a circle representing found object
    if (position.position_valid) {

        // TODO: object_area_ is not set, so this will be 0!
        auto radius = std::sqrt(object_area_ / PI);
        cv::Point center;
        center.x = position.position.x;
        center.y = position.position.y;
        cv::circle(frame, center, radius, cv::Scalar(0, 0, 255), 4);
        msg = cv::format("(%d, %d) pixels",
                (int) position.position.x,
                (int) position.position.y);
    }

    int baseline = 0;
    cv::Size textSize = cv::getTextSize(msg, 1, 1, 1, &baseline);
    cv::Point text_origin(
            frame.cols - textSize.width - 10,
            frame.rows - 2 * baseline - 10);

    cv::putText(frame, msg, text_origin, 1, 1, cv::Scalar(0, 255, 0));

    cv::imshow(tuning_image_title_, frame);
    cv::waitKey(1);
}

void SimpleThreshold::applyThreshold(cv::Mat &frame) {

    // TODO: HACK! preserve IO type??
    if (frame.type() != CV_8UC1)
        cv::cvtColor(frame, frame, cv::COLOR_BGR2GRAY);

    cv::inRange(frame,
                min_intensity_bound_,
                max_intensity_bound_,
                threshold_frame_);

    // Filter the resulting threshold image
    if (erode_on_)
        cv::erode(threshold_frame_, threshold_frame_, erode_element_);

    if (dilate_on_)
        cv::dilate(threshold_frame_, threshold_frame_, dilate_element_);
}

void SimpleThreshold::createTuningWindows() {

#ifdef HAVE_OPENGL
    try {
        cv::namedWindow(tuning_image_title_, cv::WINDOW_OPENGL & cv::WINDOW_KEEPRATIO);
    } catch (cv::Exception& ex) {
        whoWarn(name_, "OpenCV not compiled with OpenGL support. Falling back to OpenCV's display driver.\n");
        cv::namedWindow(tuning_image_title_, cv::WINDOW_NORMAL & cv::WINDOW_KEEPRATIO);
    }
#else
    cv::namedWindow(tuning_image_title_, cv::WINDOW_NORMAL);
#endif

    // Create sliders and insert them into window
    cv::createTrackbar("MIN BOUND", tuning_image_title_,
            &min_intensity_bound_, 256);
    cv::createTrackbar("MAX BOUND", tuning_image_title_,
            &max_intensity_bound_, 256);
    cv::createTrackbar("MIN AREA", tuning_image_title_,
            &dummy0_, OAT_POSIDET_MAX_OBJ_AREA_PIX, &simpleThresholdMinAreaSliderChangedCallback, this);
    cv::createTrackbar("MAX AREA", tuning_image_title_,
            &dummy1_, OAT_POSIDET_MAX_OBJ_AREA_PIX, &simpleThresholdMaxAreaSliderChangedCallback, this);
    tuning_windows_created_ = true;
    cv::createTrackbar("ERODE", tuning_image_title_, &erode_px_, 50,
            &simpleThresholdErodeSliderChangedCallback, this);
    cv::createTrackbar("DILATE", tuning_image_title_, &dilate_px_, 50,
            &simpleThresholdDilateSliderChangedCallback, this);
}

void SimpleThreshold::set_erode_size(int value) {

    if (value > 0) {
        erode_on_ = true;
        erode_px_ = value;
        erode_element_ = cv::getStructuringElement(cv::MORPH_RECT, cv::Size(erode_px_, erode_px_));
    } else {
        erode_on_ = false;
    }
}

void SimpleThreshold::set_dilate_size(int value) {
    if (value > 0) {
        dilate_on_ = true;
        dilate_px_ = value;
        dilate_element_ = cv::getStructuringElement(cv::MORPH_RECT, cv::Size(dilate_px_, dilate_px_));
    } else {
        dilate_on_ = false;
    }
}

// Non-member GUI callback functions
void simpleThresholdMinAreaSliderChangedCallback(int value, void * object) {
    auto d = static_cast<SimpleThreshold *>(object);
    d->set_min_object_area(static_cast<double>(value));
}

void simpleThresholdMaxAreaSliderChangedCallback(int value, void * object) {
    auto d = static_cast<SimpleThreshold *>(object);
    d->set_max_object_area(static_cast<double>(value));
}

void simpleThresholdErodeSliderChangedCallback(int value, void * object) {
    auto d = static_cast<SimpleThreshold *>(object);
    d->set_erode_size(value);
}

void simpleThresholdDilateSliderChangedCallback(int value, void * object) {
    auto d = static_cast<SimpleThreshold *>(object);
    d->set_dilate_size(value);
}

} /* namespace oat */
