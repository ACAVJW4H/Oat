//******************************************************************************
//* File:   DifferenceDetector.cpp
//* Author: Jon Newman <jpnewman snail mit dot edu>
//*
//* Copyright (c) Jon Newman (jpnewman snail mit dot edu)
//* All right reserved.
//* This file is part of the Oat project.
//* This is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* This software is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* You should have received a copy of the GNU General Public License
//* along with this source code.  If not, see <http://www.gnu.org/licenses/>.
//****************************************************************************

#include "OatConfig.h" // Generated by CMake

#include <string>
#include <opencv2/opencv.hpp>
#include <cpptoml.h>

#include "../../lib/datatypes/Position2D.h"
#include "../../lib/utility/IOFormat.h"
#include "../../lib/utility/OatTOMLSanitize.h"

#include "DifferenceDetector.h"

namespace oat {

DifferenceDetector2D::DifferenceDetector2D(const std::string &frame_source_address,
                                           const std::string &position_sink_address) :
  PositionDetector(frame_source_address, position_sink_address)
, tuning_image_title_(position_sink_address + "_tuning")
, tuning_windows_created_(false)
, last_image_set_(false)
{
    // Cannot use initializer because if this is set to 0, blur_on
    // must be set to false
    set_blur_size(2);
}

oat::Position2D DifferenceDetector2D::detectPosition(cv::Mat &frame) {

    // TODO: These could be refactored, but I don't think I care right now
    this_image_ = frame;
    applyThreshold();
    siftBlobs();
    tune();

    return object_position_;
}

void DifferenceDetector2D::configure(const std::string& config_file,
                                     const std::string& config_key) {

    // Available options
    std::vector<std::string> options {"blur", "diff_threshold", "tune"};

    // This will throw cpptoml::parse_exception if a file
    // with invalid TOML is provided
   auto config = cpptoml::parse_file(config_file);

    // See if a camera configuration was provided
    if (config->contains(config_key)) {

        // Get this components configuration table
        auto this_config = config->get_table(config_key);

        // Check for unknown options in the table and throw if you find them
        oat::config::checkKeys(options, this_config);

        // Blur
        {
            int64_t val;
            oat::config::getValue(this_config, "blur", val, (int64_t)0);
            set_blur_size(val);
        }

        // Difference threshold
        {
            int64_t val;
            oat::config::getValue(this_config, "diff_threshold", val, (int64_t)0);
            difference_intensity_threshold_ = val;
        }

        // Tuning
        oat::config::getValue(this_config, "tune", tuning_on_);
        if (tuning_on_) {
            createTuningWindows();
        }

    } else {
        throw (std::runtime_error(oat::configNoTableError(config_key, config_file)));
    }

}

void DifferenceDetector2D::siftBlobs() {

    cv::Mat thresh_cpy = threshold_image_.clone();
    std::vector< std::vector < cv::Point > > contours;
    std::vector< cv::Vec4i > hierarchy;
    cv::Rect objectBoundingRectangle;

    //these two vectors needed for output of findContours
    //find contours of filtered image using openCV findContours function
    //findContours(temp,contours,hierarchy,CV_RETR_CCOMP,CV_CHAIN_APPROX_SIMPLE );// retrieves all contours
    cv::findContours(thresh_cpy, contours, hierarchy, cv::RETR_EXTERNAL, cv::CHAIN_APPROX_SIMPLE); // retrieves external contours

    //if contours vector is not empty, we have found some objects
    if (contours.size() > 0) {
        object_position_.position_valid = true;
    } else
        object_position_.position_valid = false;

    if (object_position_.position_valid) {

        //the largest contour is found at the end of the contours vector
        //we will simply assume that the biggest contour is the object we are looking for.
        std::vector< std::vector<cv::Point> > largestContourVec;
        largestContourVec.push_back(contours.at(contours.size() - 1));

        //make a bounding rectangle around the largest contour then find its centroid
        //this will be the object's final estimated position.
        objectBoundingRectangle = cv::boundingRect(largestContourVec.at(0));
        object_position_.position.x = objectBoundingRectangle.x + 0.5 * objectBoundingRectangle.width;
        object_position_.position.y = objectBoundingRectangle.y + 0.5 * objectBoundingRectangle.height;
    }

    if (tuning_on_) {

        std::string msg = cv::format("Object not found"); // TODO: This default msg will not show up. I have no idea why.

        // Plot a circle representing found object
        if (object_position_.position_valid) {
            cv::cvtColor(threshold_image_, threshold_image_, cv::COLOR_GRAY2BGR);
            cv::rectangle(threshold_image_, objectBoundingRectangle.tl(), objectBoundingRectangle.br(), cv::Scalar(0, 0, 255), 2);
            msg = cv::format("(%d, %d) pixels", (int) object_position_.position.x, (int) object_position_.position.y);

        }

        int baseline = 0;
        cv::Size textSize = cv::getTextSize(msg, 1, 1, 1, &baseline);
        cv::Point text_origin(
                threshold_image_.cols - textSize.width - 10,
                threshold_image_.rows - 2 * baseline - 10);

        cv::putText(threshold_image_, msg, text_origin, 1, 1, cv::Scalar(0, 255, 0));
    }
}

void DifferenceDetector2D::applyThreshold() {

    if (last_image_set_) {
        cv::cvtColor(this_image_, this_image_, cv::COLOR_BGR2GRAY);
        cv::absdiff(this_image_, last_image_, threshold_image_);
        cv::threshold(threshold_image_, threshold_image_, difference_intensity_threshold_, 255, cv::THRESH_BINARY);
        if (blur_on_) {
            cv::blur(threshold_image_, threshold_image_, blur_size_);
        }
        cv::threshold(threshold_image_, threshold_image_, difference_intensity_threshold_, 255, cv::THRESH_BINARY);
        last_image_ = this_image_.clone(); // Get a copy of the last image
    } else {
        threshold_image_ = this_image_.clone();
        cv::cvtColor(threshold_image_, threshold_image_, cv::COLOR_BGR2GRAY);
        last_image_ = this_image_.clone();
        cv::cvtColor(last_image_, last_image_, cv::COLOR_BGR2GRAY);
        last_image_set_ = true;
    }
}

void DifferenceDetector2D::tune() {

    if (tuning_on_) {
        if (!tuning_windows_created_) {
            createTuningWindows();
        }
        cv::imshow(tuning_image_title_, threshold_image_);
        cv::waitKey(1);

    } else if (!tuning_on_ && tuning_windows_created_) {

        // TODO: Window will not actually close!!

        // Destroy the tuning windows
        cv::destroyWindow(tuning_image_title_);
        tuning_windows_created_ = false;
    }
}

void DifferenceDetector2D::createTuningWindows() {

#ifdef OAT_USE_OPENGL
    try {
        cv::namedWindow(tuning_image_title_, cv::WINDOW_OPENGL & cv::WINDOW_KEEPRATIO);
    } catch (cv::Exception& ex) {
        whoWarn(name_, "OpenCV not compiled with OpenGL support. Falling back to OpenCV's display driver.\n");
        cv::namedWindow(tuning_image_title_, cv::WINDOW_NORMAL & cv::WINDOW_KEEPRATIO);
    }
#else
    cv::namedWindow(tuning_image_title_, cv::WINDOW_NORMAL);
#endif

    // Create sliders and insert them into window
    cv::createTrackbar("THRESH", tuning_image_title_, &difference_intensity_threshold_, 256);
    cv::createTrackbar("BLUR", tuning_image_title_, &blur_size_.height, 50, &DifferenceDetector2D::blurSliderChangedCallback, this);

    tuning_windows_created_ = true;
}

void DifferenceDetector2D::blurSliderChangedCallback(int value, void* object) {
    DifferenceDetector2D* diff_detector = (DifferenceDetector2D*) object;
    diff_detector->set_blur_size(value);
}

void DifferenceDetector2D::set_blur_size(int value) {

    if (value > 0) {
        blur_on_ = true;
        blur_size_ = cv::Size(value, value);
    } else {
        blur_on_ = false;
    }
}

} /* namespace oat */