//******************************************************************************
//* File:   ArucoBoard.cpp
//* Author: Jon Newman <jpnewman snail mit dot edu>
//*
//* Copyright (c) Jon Newman (jpnewman snail mit dot edu)
//* All right reserved.
//* This file is part of the Oat project.
//* This is free software: you can redistribute it and/or modify
//* it under the terms of the GNU General Public License as published by
//* the Free Software Foundation, either version 3 of the License, or
//* (at your option) any later version.
//* This software is distributed in the hope that it will be useful,
//* but WITHOUT ANY WARRANTY; without even the implied warranty of
//* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//* GNU General Public License for more details.
//* You should have received a copy of the GNU General Public License
//* along with this source code.  If not, see <http://www.gnu.org/licenses/>.
//****************************************************************************

#include "OatConfig.h" // Generated by CMake

#include <cmath>
#include <string>
#include <opencv2/aruco.hpp>
#include <opencv2/cvconfig.h>
#include <opencv2/opencv.hpp>
#include <cpptoml.h>

#include "../../lib/datatypes/Position2D.h"
#include "../../lib/utility/IOFormat.h"
#include "../../lib/utility/TOMLSanitize.h"

#include "DetectorFunc.h"
#include "ArucoBoard.h"

namespace oat {

ArucoBoard::ArucoBoard(const std::string &frame_source_address,
             const std::string &position_sink_address) :
  PositionDetector(frame_source_address, position_sink_address)
{
    detection_params_ = cv::aruco::DetectorParameters::create();
    auto d = cv::aruco::getPredefinedDictionary(marker_dict_id_);

    // TODO: program options
    cv::Ptr<cv::aruco::GridBoard> grid_board = 
        cv::aruco::GridBoard::create(n_x_,
                                     n_y_,
                                     marker_length_,
                                     marker_separation_,
                                     d);

    board_ = grid_board.staticCast<cv::aruco::Board>();

    // Calculate offset to middle of grid
    // TODO: Seems to have a slight offset for some reason
    auto nx = static_cast<float>(n_x_)/2.0;
    auto ny = static_cast<float>(n_y_)/2.0;
    origin_.x = nx * marker_length_ + (nx - 1) * marker_separation_+ marker_length_/6, // TODO: Num pixels + 2
    origin_.y = ny * marker_length_ + (ny - 1) * marker_separation_+ marker_length_/6,
    origin_.z = 0;

    // TODO: Remove
    ref_pts_.push_back(origin_);
    ref_pts_.push_back(corner_);

    // HACK HACK HACK
    // show the board for printing
    //cv::Mat board_img;
    //grid_board->draw(cv::Size(600, 500), board_img, 10, 1 );
    //cv::imwrite("board.jpg", board_img);

    //cv::namedWindow("Track", cv::WINDOW_NORMAL & cv::WINDOW_KEEPRATIO);
}

void ArucoBoard::detectPosition(cv::Mat &frame, oat::Position2D &position) {

    //auto fc = frame.clone();

    // First detect markers
    std::vector<int> marker_ids;
    std::vector< std::vector<cv::Point2f> > marker_corners;
    auto parameters = cv::aruco::DetectorParameters::create();
    cv::aruco::detectMarkers(frame,
                             board_->dictionary,
                             marker_corners,
                             marker_ids,
                             detection_params_);

    // Next try to estimate pose
    if (marker_ids.size() > 0) {
        
        // TODO: Remove
        //cv::aruco::drawDetectedMarkers(fc, marker_corners, marker_ids);

        cv::Vec3d rvec, tvec;
        int valid = cv::aruco::estimatePoseBoard(marker_corners,
                                                 marker_ids,
                                                 board_,
                                                 camera_matrix_,
                                                 distortion_coefficients_,
                                                 rvec, tvec);
        if (valid) {

            // Find origin
            auto T = cv::Affine3f(rvec, tvec);
            auto origin = T * origin_; 
            auto corner = T * corner_; 

            //TODO: All plotting stuff, remove
            std::vector<cv::Point2f> xy;
            cv::projectPoints(ref_pts_, 
                              rvec, 
                              tvec, 
                              camera_matrix_, 
                              distortion_coefficients_, 
                              xy);


            //// TODO: Remove
            //cv::circle(fc, xy[0], 10, cv::Scalar(0, 255, 0), 2);
            //cv::aruco::drawAxis(fc, camera_matrix_, distortion_coefficients_, rvec, tvec, 1);

            //Gererate position
            position.position_valid = true;
            position.position.x = xy[0].x;//origin.x;
            position.position.y = xy[0].y;//origin.x;

            // Heading is defined as the angle between a corner and the center
            // of the board +90 degrees
            auto dx = origin.x - corner.x;
            auto dy = origin.y - corner.y;
            auto theta = std::atan2(dy, dx);//  + 0.75 * oat::PI;

            position.heading_valid = true;
            position.heading.x = std::cos(theta);
            position.heading.y = std::sin(theta);

            //std::string text; 
            //text = std::to_string(57.3 * theta);
            //cv::putText(fc, text, cv::Point2d(10, 30), cv::FONT_HERSHEY_SIMPLEX, 1, cv::Scalar(255, 0, 255), 2); 
        }
    }

    // TODO: Remove
    //cv::imshow("Track", fc);
    //cv::waitKey(1);
}

void ArucoBoard::configure(const std::string& config_file,
                           const std::string& config_key) {

    // Available options
    std::vector<std::string> options {"distortion-coeffs",
                                      "camera-matrix"};

    // This will throw cpptoml::parse_exception if a file
    // with invalid TOML is provided
    auto config = cpptoml::parse_file(config_file);

    // See if a camera configuration was provided
    if (config->contains(config_key)) {

        // Get this components configuration table
        auto this_config = config->get_table(config_key);

        // Check for unknown options in the table and throw if you find them
        oat::config::checkKeys(options, this_config);

        oat::config::Array dc_array;
        if (oat::config::getArray(this_config, "distortion-coeffs", dc_array, true)) {

            auto dc_vec = dc_array->array_of<double>();

            distortion_coefficients_.clear();
            for (auto &dc : dc_vec) {
                distortion_coefficients_.push_back(dc.get()->get());
            }
        }

        // Camera Matrix
        oat::config::Array cal_array;
        if (oat::config::getArray(this_config, "camera-matrix", cal_array, 9, true)) {

            auto camera_vec = cal_array->array_of<double>();

            camera_matrix_(0, 0) = camera_vec[0]->get();
            camera_matrix_(0, 1) = camera_vec[1]->get();
            camera_matrix_(0, 2) = camera_vec[2]->get();
            camera_matrix_(1, 0) = camera_vec[3]->get();
            camera_matrix_(1, 1) = camera_vec[4]->get();
            camera_matrix_(1, 2) = camera_vec[5]->get();
            camera_matrix_(2, 0) = camera_vec[6]->get();
            camera_matrix_(2, 1) = camera_vec[7]->get();
            camera_matrix_(2, 2) = camera_vec[8]->get();

        }
    } else {
        throw (std::runtime_error(oat::configNoTableError(config_key, config_file)));
    }
}

} /* namespace oat */
